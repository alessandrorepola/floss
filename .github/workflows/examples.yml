name: PyFault Examples CI

on:
  push:
    branches: [ "main" ]
    paths:
      - 'examples/**'
      - 'pyfault/**'
      - '.github/workflows/examples.yml'
  pull_request:
    branches: [ "main" ]
    paths:
      - 'examples/**'
      - 'pyfault/**'
      - '.github/workflows/examples.yml'
  workflow_dispatch:

jobs:
  test-dummy-example:
    name: Test Dummy Example
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: 'pip'

    - name: Install PyFault
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Test dummy example
      run: |
        cd examples/dummy-example
        pyfault run --source-dir src --test-dir tests --output test_report.json
        # Verify report was generated and contains expected structure
        python -c "
        import json
        with open('test_report.json') as f:
            report = json.load(f)
        assert 'meta' in report
        assert 'files' in report
        assert 'fl_metadata' in report
        assert len(report['files']) > 0
        
        # Check that fault localization results are present
        for file_path, file_data in report['files'].items():
            if 'suspiciousness' in file_data:
                print(f'✓ Found suspiciousness data for {file_path}')
                break
        else:
            raise AssertionError('No suspiciousness data found in any file')
        
        print('✓ Dummy example test passed')
        "

  test-fastapi-examples:
    name: Test FastAPI Examples
    runs-on: ubuntu-latest
    strategy:
      matrix:
        bug: [bug2, bug3, bug6, bug11]
      fail-fast: false
      
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.8
      uses: actions/setup-python@v5
      with:
        python-version: "3.8"

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git

    - name: Install PyFault
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Setup FastAPI ${{ matrix.bug }}
      run: |
        cd examples/fastapi/${{ matrix.bug }}
        timeout 600 bash setup.sh || {
          echo "Setup timed out or failed for ${{ matrix.bug }}"
          exit 1
        }
      timeout-minutes: 10

    - name: Test PyFault on FastAPI ${{ matrix.bug }}
      run: |
        cd examples/fastapi/${{ matrix.bug }}/fastapi
        # Run PyFault with timeout to prevent hanging
        timeout 300 pyfault run || {
          echo "PyFault run execution timed out for ${{ matrix.bug }}"
          exit 1
        }
        
        # Verify report was generated and contains expected structure
        python -c "
        import json
        with open('report.json') as f:
            report = json.load(f)
        assert 'meta' in report
        assert 'files' in report
        assert 'fl_metadata' in report
        assert len(report['files']) > 0
        
        # Check that fault localization results are present
        files_with_suspiciousness = 0
        for file_path, file_data in report['files'].items():
            if 'suspiciousness' in file_data:
                files_with_suspiciousness += 1
        
        if files_with_suspiciousness == 0:
            print('Warning: No suspiciousness data found, but basic structure is valid')
        else:
            print(f'✓ Found suspiciousness data for {files_with_suspiciousness} files')
        
        print('✓ FastAPI ${{ matrix.bug }} test passed')
        "
      timeout-minutes: 8

  test-pygraphistry-example:
    name: Test PyGraphistry Example  
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: "3.10"

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y git

    - name: Install PyFault
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Setup PyGraphistry
      run: |
        cd examples/pygraphistry
        timeout 600 bash setup.sh || {
          echo "Setup timed out or failed for PyGraphistry"
          exit 1
        }
      timeout-minutes: 10

    - name: Test PyFault on PyGraphistry
      run: |
        cd examples/pygraphistry/pygraphistry
        ls
        pytest ./graphistry/tests --ignore=graphistry/tests/test_bolt_util.py --ignore=graphistry/tests/test_gremlin.py --ignore=graphistry/tests/test_ipython.py --ignore=graphistry/tests/test_nodexl.py --ignore=graphistry/tests/test_tigergraph.py --ignore=graphistry/tests/test_feature_utils.py --ignore=graphistry/tests/test_umap_utils.py --ignore=graphistry/tests/test_dgl_utils.py --ignore=graphistry/tests/test_embed_utils.py
        # Try to run PyFault
        timeout 300 pyfault run || {
          echo "PyFault test execution completed with issues (expected for some external projects)"
          exit 1
        }

        # Verify report was generated and contains expected structure
        python -c "
        import json
        with open('report.json') as f:
            report = json.load(f)
        assert 'meta' in report
        assert 'files' in report
        assert 'fl_metadata' in report
        assert len(report['files']) > 0
        
        # Check that fault localization results are present
        files_with_suspiciousness = 0
        for file_path, file_data in report['files'].items():
            if 'suspiciousness' in file_data:
                files_with_suspiciousness += 1
        
        if files_with_suspiciousness == 0:
            print('Warning: No suspiciousness data found, but basic structure is valid')
        else:
            print(f'✓ Found suspiciousness data for {files_with_suspiciousness} files')
        
        print('✓ PyGraphistry ${{ matrix.bug }} test passed')
      timeout-minutes: 8

  validate-documentation:
    name: Validate Example Documentation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Check README files exist
      run: |
        # Check main examples README
        if [ ! -f examples/README.md ]; then
          echo "Missing examples/README.md"
          exit 1
        fi
        
        # Check individual example READMEs
        for example in dummy-example fastapi/bug2 fastapi/bug3 fastapi/bug6 fastapi/bug11 pygraphistry; do
          if [ ! -f "examples/$example/README.md" ]; then
            echo "Missing examples/$example/README.md"
            exit 1
          fi
          echo "✓ Found examples/$example/README.md"
        done

    - name: Check setup scripts exist
      run: |
        # Check setup scripts for examples that need them
        for example in fastapi/bug2 fastapi/bug3 fastapi/bug6 fastapi/bug11 pygraphistry; do
          if [ ! -f "examples/$example/setup.sh" ]; then
            echo "Missing examples/$example/setup.sh"
            exit 1
          fi
          if [ ! -x "examples/$example/setup.sh" ]; then
            echo "examples/$example/setup.sh is not executable"
            exit 1
          fi
          echo "✓ Found executable examples/$example/setup.sh"
        done

    - name: Check configuration files exist
      run: |
        # Check pyfault.conf files
        for example in dummy-example fastapi/bug2 fastapi/bug3 fastapi/bug6 fastapi/bug11 pygraphistry; do
          if [ ! -f "examples/$example/pyfault.conf" ]; then
            echo "Missing examples/$example/pyfault.conf"
            exit 1
          fi
          echo "✓ Found examples/$example/pyfault.conf"
        done

    - name: Validate README content
      run: |
        # Basic validation that READMEs contain key sections
        for readme in examples/README.md examples/*/README.md; do
          if [ -f "$readme" ]; then
            if ! grep -q "## Setup" "$readme" && ! grep -q "## Quick Start" "$readme"; then
              echo "README $readme missing setup/quick start section"
              exit 1
            fi
            echo "✓ Validated $readme"
          fi
        done

  integration-test:
    name: Integration Test - Full Example Workflow
    runs-on: ubuntu-latest
    needs: [test-dummy-example]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: "3.12"
        cache: 'pip'

    - name: Install PyFault with UI dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[ui]"

    - name: Test complete workflow with dummy example
      run: |
        cd examples/dummy-example
        
        # Test step-by-step workflow
        pyfault test --source-dir src --test-dir tests --output coverage.json
        pyfault fl --input coverage.json --output report.json --formulas ochiai tarantula dstar2
        
        # Verify outputs
        python -c "
        import json
        
        # Check coverage file
        with open('coverage.json') as f:
            coverage = json.load(f)
        assert 'files' in coverage
        assert 'tests' in coverage
        
        # Check report file  
        with open('report.json') as f:
            report = json.load(f)
        assert 'meta' in report
        assert 'files' in report
        assert 'fl_metadata' in report
        assert len(report['files']) > 0
        
        # Verify the bug is detected (line 10 in equilateral.py should have high suspiciousness)
        found_bug = False
        for file_path, file_data in report['files'].items():
            if 'equilateral.py' in file_path and 'suspiciousness' in file_data:
                suspiciousness_data = file_data['suspiciousness']
                # Check line 10 for high suspiciousness with any formula
                if '10' in suspiciousness_data:
                    line_suspiciousness = suspiciousness_data['10']
                    for formula, score in line_suspiciousness.items():
                        if score > 0.5:  # Threshold for 'high' suspiciousness
                            found_bug = True
                            print(f'✓ Bug correctly identified: line 10, formula {formula}, score {score}')
                            break
                if found_bug:
                    break
        
        if not found_bug:
            print('Warning: Bug not clearly identified with high suspiciousness')
            # Still consider test passed if basic structure is correct        
        print('✓ Integration test passed')
        "
